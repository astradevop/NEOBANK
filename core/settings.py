"""
Django settings for core project.

Generated by 'django-admin startproject'.
"""

import os
from pathlib import Path
import environ

BASE_DIR = Path(__file__).resolve().parent.parent

# ----- env setup -----
env = environ.Env(DEBUG=(bool, False))
# Only read a local .env if present (DEV). Do NOT commit .env to git.
_local_env = BASE_DIR / ".env"
if _local_env.exists():
    environ.Env.read_env(str(_local_env))

# ----- security -----
SECRET_KEY = env("SECRET_KEY")
DEBUG = env.bool("DEBUG", default=False)

# ALLOWED_HOSTS: set as comma separated in .env or via host list in platform env
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["127.0.0.1", "localhost"])

# ----- apps & middleware -----
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third-party
    "corsheaders",
    # your apps
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise (static files) should be HIGH in stack after SecurityMiddleware
    "whitenoise.middleware.WhiteNoiseMiddleware",
    # corsheaders should be before CommonMiddleware
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Keep your templates folder; ensure it exists at project root/templates
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# ----- database (Supabase) -----
# Use DATABASE_URL env var. env.db() will read DATABASE_URL by default, but be explicit:
DATABASES = {
    "default": env.db("DATABASE_URL", default=None)
}

# ----- password validators -----
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ----- internationalization & timezone -----
LANGUAGE_CODE = "en-us"
# Prefer local timezone for you (change if you want UTC)
TIME_ZONE = "Asia/Kolkata"
USE_I18N = True
USE_TZ = True

# ----- static files (WhiteNoise) -----
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
# Use compressed manifest for caching in prod; fallback if it trips during build
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# ----- default primary key -----
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ----- CORS (front-end origins) -----
# Set CORS_ALLOWED_ORIGINS as comma-separated list in env or set CORS_ALLOW_ALL_ORIGINS=True for dev only
CORS_ALLOWED_ORIGINS = env.list("CORS_ALLOWED_ORIGINS", default=[])
CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", default=False)

# ----- supabase keys (optional, used by your app if needed) -----
SUPABASE_URL = env("SUPABASE_URL", default=None)
SUPABASE_ANON_KEY = env("SUPABASE_ANON_KEY", default=None)
